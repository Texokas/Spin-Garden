// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
const urlParams = new URLSearchParams(window.location.search);
const gameType = urlParams.get('game');
const userId = urlParams.get('user_id');

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_URL = '/api';

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async function updateBalance() {
    try {
        const response = await fetch(`${API_URL}/balance?user_id=${userId}`);
        const data = await response.json();
        document.getElementById('balance').textContent = data.balance;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    const gameContainer = document.getElementById('game-container');
    
    switch (gameType) {
        case 'slots':
            initSlots(gameContainer);
            break;
        case 'blackjack':
            initBlackjack(gameContainer);
            break;
        case 'roulette':
            initRoulette(gameContainer);
            break;
        default:
            gameContainer.innerHTML = '<h2>–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateBalance();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤
function initSlots(container) {
    container.innerHTML = `
        <h2>üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞</h2>
        <div class="slots-container">
            <div class="slot">?</div>
            <div class="slot">?</div>
            <div class="slot">?</div>
        </div>
        <div class="controls">
            <input type="number" id="bet" min="5" value="5" step="5">
            <button onclick="spinSlots()">–ö—Ä—É—Ç–∏—Ç—å</button>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤
async function spinSlots() {
    const bet = document.getElementById('bet').value;
    const button = document.querySelector('.controls button');
    button.disabled = true;
    
    try {
        const response = await fetch(`${API_URL}/slots`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: userId,
                bet: parseInt(bet)
            })
        });
        
        const data = await response.json();
        
        if (data.error) {
            alert(data.error);
            return;
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        const slots = document.querySelectorAll('.slot');
        slots.forEach((slot, index) => {
            setTimeout(() => {
                slot.textContent = data.combination[index];
            }, 500 * (index + 1));
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        setTimeout(updateBalance, 2000);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setTimeout(() => {
            if (data.win > 0) {
                alert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${data.win} –º–æ–Ω–µ—Ç!`);
            } else {
                alert('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
            }
            button.disabled = false;
        }, 2000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ —Å–ª–æ—Ç—ã:', error);
        button.disabled = false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª—ç–∫–¥–∂–µ–∫–∞
function initBlackjack(container) {
    container.innerHTML = `
        <h2>üÉè 21</h2>
        <div class="blackjack-container">
            <div class="dealer-hand"></div>
            <div class="player-hand"></div>
            <div class="controls">
                <input type="number" id="bet" min="15" value="15" step="5">
                <button onclick="createGame()">–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É</button>
                <button onclick="joinGame()">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</button>
                <button onclick="hit()">–í–∑—è—Ç—å –∫–∞—Ä—Ç—É</button>
                <button onclick="stand()">–•–≤–∞—Ç–∏—Ç</button>
            </div>
        </div>
    `;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
function initRoulette(container) {
    container.innerHTML = `
        <h2>üé≤ –†—É–ª–µ—Ç–∫–∞</h2>
        <div class="roulette-container">
            ${generateRouletteNumbers()}
        </div>
        <div class="controls">
            <input type="number" id="bet" min="10" value="10" step="5">
            <button onclick="placeBet()">–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</button>
            <button onclick="spinRoulette()">–ö—Ä—É—Ç–∏—Ç—å</button>
        </div>
    `;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
function generateRouletteNumbers() {
    const numbers = [];
    for (let i = 0; i <= 36; i++) {
        const color = i === 0 ? 'green' : (i % 2 === 0 ? 'black' : 'red');
        numbers.push(`<div class="roulette-number ${color}" data-number="${i}">${i}</div>`);
    }
    return numbers.join('');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initGame); 