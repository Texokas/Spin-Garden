import os
import logging
import traceback
import asyncio
import sys
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, filters
from config import BOT_TOKEN, INITIAL_BALANCE, BLACKJACK_MIN_BET, SLOTS_MIN_BET, ROULETTE_MIN_BET
from models import User, Transaction, TransactionType
from database import init_db, get_db, update_balance
from datetime import datetime
from games.blackjack import BlackjackGame
from games.roulette import RouletteGame, Bet
from games.slots import SlotsGame

if sys.platform.startswith('win') and sys.version_info >= (3, 8):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.effective_user:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        return
    
    if not update.effective_message:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name or str(user_id)
    
    with get_db() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = session.query(User).filter(User.user_id == user_id).first()
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(user_id=user_id, username=username, balance=INITIAL_BALANCE)
            session.add(user)
            session.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
        
        if user and getattr(user, 'is_banned', 0):
            await update.effective_message.reply_text("–ì–µ—Ç–∞—É—Ç –æ—Ç—Å—é–¥–∞ –ø–æ–∑–æ—Ä–Ω–∏–∫ –Ω–∏—â–∏–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [
                InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞", callback_data="slots_menu"),
                InlineKeyboardButton("üé≤ –†—É–ª–µ—Ç–∫–∞", callback_data="roulette_menu")
            ],
            [InlineKeyboardButton("üÉè 21", callback_data="blackjack_menu")],
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ, {username}!\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç",
            reply_markup=reply_markup
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    if not update.callback_query:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å callback_query")
        return
    
    query = update.callback_query
    if not query.from_user or not query.message or not query.data:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_query")
        return
    
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.first_name or str(user_id)
    
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
    
    with get_db() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = session.query(User).filter(User.user_id == user_id).first()
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {user_id}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
            
        if user and getattr(user, 'is_banned', 0):
            await query.message.reply_text("–ì–µ—Ç–∞—É—Ç –æ—Ç—Å—é–¥–∞ –ø–æ–∑–æ—Ä–Ω–∏–∫ –Ω–∏—â–∏–π")
            return
            
        if query.data == "balance":
            await query.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç")
            
        elif query.data == "slots_menu":
            keyboard = [
                [InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å (10 –º–æ–Ω–µ—Ç)", callback_data="slots_spin")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            await query.message.edit_text(
                "üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 –º–æ–Ω–µ—Ç",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        elif query.data == "roulette_menu":
            keyboard = [
                [InlineKeyboardButton("üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data="roulette_red")],
                [InlineKeyboardButton("‚ö´ –ß—ë—Ä–Ω–æ–µ", callback_data="roulette_black")],
                [InlineKeyboardButton("üü¢ –ó–µ—Ä–æ", callback_data="roulette_zero")],
                [InlineKeyboardButton("2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ", callback_data="roulette_even")],
                [InlineKeyboardButton("1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ", callback_data="roulette_odd")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            await query.message.edit_text(
                "üé≤ –†—É–ª–µ—Ç–∫–∞\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        elif query.data == "blackjack_menu":
            keyboard = [
                [InlineKeyboardButton("üÉè –ù–∞—á–∞—Ç—å –∏–≥—Ä—É (50 –º–æ–Ω–µ—Ç)", callback_data="blackjack_start")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            await query.message.edit_text(
                "üÉè 21\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 50 –º–æ–Ω–µ—Ç",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        elif query.data == "main_menu":
            keyboard = [
                [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
                [
                    InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞", callback_data="slots_menu"),
                    InlineKeyboardButton("üé≤ –†—É–ª–µ—Ç–∫–∞", callback_data="roulette_menu")
                ],
                [InlineKeyboardButton("üÉè 21", callback_data="blackjack_menu")],
                [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")]
            ]
            await query.message.edit_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ, {username}!\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        elif query.data.startswith("roulette_"):
            bet_type = query.data.split("_")[1]
            if bet_type in ["red", "black", "zero", "even", "odd"]:
                user = session.query(User).filter(User.user_id == user_id).with_for_update().first()
                if user is None or user.balance < ROULETTE_MIN_BET:
                    await query.message.reply_text(
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {ROULETTE_MIN_BET}"
                    )
                    return
                game = RouletteGame()
                result = game.play(bet_type)
                if "error" in result:
                    await query.message.reply_text(result["error"])
                    return
                if result["win"]:
                    update_balance(session, user_id, result["prize"], TransactionType.GAME_WIN, "roulette")
                    user.balance += result["prize"]
                    await query.message.reply_text(
                        f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {result['number']} {result['color']}\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {result['prize']} –º–æ–Ω–µ—Ç!\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}"
                    )
                else:
                    update_balance(session, user_id, -result["bet"], TransactionType.GAME_LOSS, "roulette")
                    user.balance -= result["bet"]
                    await query.message.reply_text(
                        f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {result['number']} {result['color']}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {result['bet']} –º–æ–Ω–µ—Ç.\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}"
                    )
                # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
                keyboard = [
                    [InlineKeyboardButton("–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="roulette_menu")],
                    [InlineKeyboardButton("¬´ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏")
        
        elif query.data == "leaderboard":
            top_users = session.query(User).order_by(User.balance.desc()).limit(10).all()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(top_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")
            
            leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
            for i, user in enumerate(top_users, 1):
                leaderboard_text += f"{i}. {user.username}: {user.balance} –º–æ–Ω–µ—Ç\n"
            
            await query.message.reply_text(leaderboard_text)
            logger.info("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        elif query.data == "help":
            help_text = (
                "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n\n"
                "üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞:\n"
                "- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 5 –º–æ–Ω–µ—Ç\n"
                "- 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞: x5\n\n"
                "üÉè 21:\n"
                "- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 15 –º–æ–Ω–µ—Ç\n"
                "- –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –¥–∏–ª–µ—Ä–∞\n"
                "- –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä (2-6 –∏–≥—Ä–æ–∫–æ–≤)\n\n"
                "üé≤ –†—É–ª–µ—Ç–∫–∞:\n"
                "- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 –º–æ–Ω–µ—Ç\n"
                "- –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—Ç–∞–≤–æ–∫\n\n"
                "üèÜ /leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
                "üí∞ /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
            await query.message.reply_text(help_text)
            logger.info("–°–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        elif query.data == "game_blackjack":
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫")
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
            keyboard = [
                [
                    InlineKeyboardButton("üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞", callback_data="blackjack_single"),
                    InlineKeyboardButton("üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä", callback_data="blackjack_multi")
                ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã –≤ 21:\n\n"
                "üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞ - –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –¥–∏–ª–µ—Ä–∞\n"
                "üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä - –∏–≥—Ä–∞ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ (2-6 —á–µ–ª–æ–≤–µ–∫)",
                reply_markup=reply_markup
            )
        
        elif query.data == "back_to_menu":
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å game_*
            keyboard = [
                [
                    InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞", callback_data="game_slots"),
                    InlineKeyboardButton("üÉè 21", callback_data="game_blackjack")
                ],
                [
                    InlineKeyboardButton("üé≤ –†—É–ª–µ—Ç–∫–∞", callback_data="game_roulette"),
                    InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
                ],
                [
                    InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard"),
                    InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=reply_markup)
        
        elif query.data.startswith("game_"):
            game_type = query.data.split("_")[1]
            if game_type == "blackjack":
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–ª—ç–∫–¥–∂–µ–∫–∞
                keyboard = [
                    [
                        InlineKeyboardButton("üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞", callback_data="blackjack_single"),
                        InlineKeyboardButton("üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä", callback_data="blackjack_multi")
                    ],
                    [
                        InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=reply_markup)
            elif game_type == "slots":
                game = SlotsGame(game_mode="single", chat_id=query.message.chat_id)
                username = query.from_user.username or query.from_user.first_name
                success, message = game.add_player(query.from_user.id, SLOTS_MIN_BET, username)
                if not success:
                    await query.message.reply_text(message)
                    return
                success, message = game.start_game()
                if not success:
                    await query.message.reply_text(message)
                    return
                active_games[query.from_user.id] = game
                keyboard = [
                    [InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å", callback_data="slots_spin")],
                    [InlineKeyboardButton("üîô –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="slots_exit")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.edit_text(
                    f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n{game.get_game_state()}",
                    reply_markup=reply_markup
                )
            elif game_type == "roulette":
                game = RouletteGame(game_mode="single", chat_id=query.message.chat_id)
                username = query.from_user.username or query.from_user.first_name
                success, message = game.add_player(query.from_user.id, ROULETTE_MIN_BET, username)
                if not success:
                    await query.message.reply_text(message)
                    return
                success, message = game.start_game()
                if not success:
                    await query.message.reply_text(message)
                    return
                active_games[query.from_user.id] = game
                keyboard = [
                    [InlineKeyboardButton("üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data="roulette_bet_red"),
                     InlineKeyboardButton("‚ö´ –ß–µ—Ä–Ω–æ–µ", callback_data="roulette_bet_black")],
                    [InlineKeyboardButton("2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ", callback_data="roulette_bet_even"),
                     InlineKeyboardButton("1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ", callback_data="roulette_bet_odd")],
                    [InlineKeyboardButton("üé≤ –ö—Ä—É—Ç–∏—Ç—å", callback_data="roulette_spin")],
                    [InlineKeyboardButton("üîô –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="roulette_exit")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.edit_text(
                    f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n{game.get_game_state()}",
                    reply_markup=reply_markup
                )
        
        # –ö—Ä—É—Ç–∏–ª–∫–∞ (—Å–ª–æ—Ç—ã)
        elif query.data == "slots_spin":
            game = active_games.get(query.from_user.id)
            chat_id = query.message.chat_id
            if not game:
                game = SlotsGame()
                active_games[query.from_user.id] = game
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏ —Å—Ç–∞—Ä—Ç—É–µ–º –∏–≥—Ä—É –ø–µ—Ä–µ–¥ spin
            add_ok, add_msg = game.add_player(query.from_user.id, SLOTS_MIN_BET, query.from_user.username or query.from_user.first_name)
            if not add_ok:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫—Ä—É—Ç–∏–ª–∫—É: {add_msg}")
            start_ok, start_msg = game.start_game()
            if not start_ok:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –∏–≥—Ä—É –≤ –∫—Ä—É—Ç–∏–ª–∫–µ: {start_msg}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if user.balance < SLOTS_MIN_BET:
                await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã!")
                return
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
            user.balance -= SLOTS_MIN_BET
            session.add(Transaction(
                user_id=query.from_user.id,
                amount=-SLOTS_MIN_BET,
                type=TransactionType.GAME_LOSS,
                game_type="slots"
            ))
            session.commit()
            # –ö—Ä—É—Ç–∏–º —Å–ª–æ—Ç—ã
            results = game.spin()
            if query.from_user.id not in results:
                print(f"[ERROR] –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è user_id {query.from_user.id} –≤ –∫—Ä—É—Ç–∏–ª–∫–µ")
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                del active_games[query.from_user.id]
                return
            symbols, win_amount = results[query.from_user.id]
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            game_message = "üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞\n\n"
            game_message += f"–ò–≥—Ä–æ–∫: {query.from_user.username or query.from_user.first_name}\n"
            game_message += f"–°—Ç–∞–≤–∫–∞: {SLOTS_MIN_BET} –º–æ–Ω–µ—Ç\n\n"
            game_message += f"{symbols[0]} | {symbols[1]} | {symbols[2]}\n\n"
            if win_amount > 0:
                game_message += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç!"
                user.balance += win_amount
                session.add(Transaction(
                    user_id=query.from_user.id,
                    amount=win_amount,
                    type=TransactionType.GAME_WIN,
                    game_type="slots"
                ))
            else:
                game_message += f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–≥—Ä—ã—à. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {SLOTS_MIN_BET} –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            session.commit()
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="slots_spin"),
                    InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫—Ä—É—Ç–∏–ª–∫–∏: {game_message}")
            await query.message.reply_text(game_message, reply_markup=reply_markup)
            del active_games[query.from_user.id]
        
        elif query.data == "slots_exit":
            if query.from_user.id in active_games:
                del active_games[query.from_user.id]
            await query.message.edit_text(
                "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                ]])
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä—É–ª–µ—Ç–∫–µ
        elif query.data.startswith("roulette_bet_"):
            bet_type = query.data.split("_")[2]
            game = active_games.get(query.from_user.id)
            chat_id = query.message.chat_id
            
            if not game:
                game = RouletteGame()
                active_games[query.from_user.id] = game
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            game_message = "üé∞ –†—É–ª–µ—Ç–∫–∞\n\n"
            game_message += f"–°—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–∞ {query.from_user.username or query.from_user.first_name}:\n"
            for bet in game.players.get(query.from_user.id, []):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å players –∏–∑ –∫–ª–∞—Å—Å–∞ RouletteGame
                game_message += f"‚Ä¢ {bet.amount} –º–æ–Ω–µ—Ç –Ω–∞ {bet.bet_type} {bet.value}\n"
            
            keyboard = []
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫
            if bet_type == "number":
                rows = []
                for i in range(0, 37, 3):
                    row = []
                    for j in range(3):
                        if i + j <= 36:
                            row.append(InlineKeyboardButton(
                                str(i + j),
                                callback_data=f"roulette_number_{i+j}"
                            ))
                    rows.append(row)
                keyboard.extend(rows)
            elif bet_type == "color":
                keyboard.append([
                    InlineKeyboardButton("üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data="roulette_color_red"),
                    InlineKeyboardButton("‚ö´ –ß–µ—Ä–Ω–æ–µ", callback_data="roulette_color_black")
                ])
            elif bet_type == "parity":
                keyboard.append([
                    InlineKeyboardButton("–ß–µ—Ç–Ω–æ–µ", callback_data="roulette_parity_even"),
                    InlineKeyboardButton("–ù–µ—á–µ—Ç–Ω–æ–µ", callback_data="roulette_parity_odd")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton("üîÑ –°–ø–∏–Ω", callback_data="roulette_spin"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="roulette_menu")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            await query.message.reply_text(game_message, reply_markup=reply_markup)
        
        elif query.data.startswith("roulette_number_") or \
             query.data.startswith("roulette_color_") or \
             query.data.startswith("roulette_parity_"):
            
            game = active_games.get(query.from_user.id)
            if not game:
                await query.message.reply_text("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
                return
            
            bet_parts = query.data.split("_")
            bet_type = bet_parts[1]
            bet_value = bet_parts[2]
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–≤–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
            bet = Bet(
                bet_type=bet_type,  # str
                value=str(bet_value),  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ str
                amount=ROULETTE_MIN_BET  # int
            )
            # –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ place_bet
            success, msg = game.place_bet(query.from_user.id, bet)
            if not success:
                await query.message.reply_text(msg)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
            personal_message = "üé∞ –†—É–ª–µ—Ç–∫–∞\n\n"
            personal_message += "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏:\n"
            for bet in game.players.get(query.from_user.id, []):
                personal_message += f"‚Ä¢ {bet.amount} –º–æ–Ω–µ—Ç –Ω–∞ {bet.bet_type} {bet.value}\n"
            if query.message.reply_markup is not None:
                await query.message.edit_text(
                    text=personal_message,
                    reply_markup=query.message.reply_markup
                )
            else:
                await query.message.edit_text(
                    text=personal_message
                )
        
        elif query.data == "roulette_spin":
            game = active_games.get(query.from_user.id)
            if not game:
                await query.message.reply_text("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
                return
            
            if not game.has_bets():
                await query.message.reply_text("–°–¥–µ–ª–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É!")
                return
            
            # –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É
            result = game.spin()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
            result_message = f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result}\n"
            if result in game.RED_NUMBERS:
                result_message += "üî¥ –ö—Ä–∞—Å–Ω–æ–µ"
            else:
                result_message += "‚ö´ –ß–µ—Ä–Ω–æ–µ"
            result_message += ", " + ("–ß–µ—Ç–Ω–æ–µ" if result % 2 == 0 else "–ù–µ—á–µ—Ç–Ω–æ–µ")
            
            await query.message.reply_text(result_message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            results = game.process_bets(result)
            for player_id, player_result in results.items():
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                player = session.query(User).filter(User.user_id == player_id).first()
                if player:
                    player.balance += player_result
                    session.add(Transaction(
                        user_id=player_id,
                        amount=player_result,
                        type=TransactionType.GAME_WIN if player_result > 0 else TransactionType.GAME_LOSS,
                        game_type="roulette"
                    ))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                personal_result = f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
                personal_result += f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result}\n"
                if result in game.RED_NUMBERS:
                    personal_result += "üî¥ –ö—Ä–∞—Å–Ω–æ–µ"
                else:
                    personal_result += "‚ö´ –ß–µ—Ä–Ω–æ–µ"
                personal_result += ", " + ("–ß–µ—Ç–Ω–æ–µ" if result % 2 == 0 else "–ù–µ—á–µ—Ç–Ω–æ–µ") + "\n\n"
                
                personal_result += "–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏:\n"
                for bet in game.players.get(player_id, []):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å players –∏–∑ –∫–ª–∞—Å—Å–∞ RouletteGame
                    personal_result += f"‚Ä¢ {bet.amount} –º–æ–Ω–µ—Ç –Ω–∞ {bet.bet_type} {bet.value}\n"
                
                personal_result += f"\n–ò—Ç–æ–≥–æ: {'+' if player_result > 0 else ''}{player_result} –º–æ–Ω–µ—Ç"
                
                keyboard = [[
                    InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="roulette_menu"),
                    InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ: {personal_result}")
                await query.message.reply_text(
                    personal_result,
                    reply_markup=reply_markup
                )
            
            session.commit()
            
            # –û—á–∏—â–∞–µ–º –∏–≥—Ä—É
            del active_games[query.from_user.id]
        
        elif query.data == "roulette_exit" or query.data == "roulette_menu":
            if query.from_user.id in active_games:
                del active_games[query.from_user.id]
            await query.message.edit_text(
                "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                ]])
            )

async def blackjack_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –≤ –±–ª—ç–∫–¥–∂–µ–∫"""
    query = update.callback_query
    if query is None or query.message is None or query.from_user is None or query.data is None:
        print("[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_query –≤ blackjack_handler")
        return
    await query.answer()
    print(f"[DEBUG] blackjack_handler: callback_data={query.data}")
    
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.first_name
    chat_id = query.message.chat_id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    
    try:
        with get_db() as session:
            user = session.query(User).filter(User.user_id == user_id).first()
            if not user:
                await query.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if user and getattr(user, 'is_banned', 0):
                await query.message.reply_text("–ì–µ—Ç–∞—É—Ç –æ—Ç—Å—é–¥–∞ –ø–æ–∑–æ—Ä–Ω–∏–∫ –Ω–∏—â–∏–π")
                return
            
            if query.data == "blackjack_single":
                logger.info(f"–ù–∞—á–∞–ª–æ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–¥–∏–Ω–æ—á–Ω—É—é –∏–≥—Ä—É
                game = BlackjackGame(game_mode="single", chat_id=chat_id)
                success, message = game.add_player(user_id, BLACKJACK_MIN_BET, username)
                if not success:
                    await query.message.reply_text(message)
                    return
                
                success, message = game.start_game()
                if not success:
                    await query.message.reply_text(message)
                    return
                
                active_games[user_id] = game
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã
                keyboard = [
                    [
                        InlineKeyboardButton("üé¥ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="blackjack_hit"),
                        InlineKeyboardButton("‚úã –°—Ç–æ–ø", callback_data="blackjack_stand")
                    ],
                    [
                        InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="blackjack_double")
                    ],
                    [
                        InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="blackjack_exit")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.message.edit_text(
                    f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n{game.get_game_state()}",
                    reply_markup=reply_markup
                )
            
            elif query.data == "blackjack_multi":
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä")
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
                keyboard = []
                # –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è 2 –∏–≥—Ä–æ–∫–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 1 (2 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_1_2"),
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 2 (2 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_2_2")
                ])
                # –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è 3 –∏–≥—Ä–æ–∫–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 3 (3 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_3_3"),
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 4 (3 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_4_3")
                ])
                # –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è 4 –∏–≥—Ä–æ–∫–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 5 (4 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_5_4"),
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 6 (4 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_6_4")
                ])
                # –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è 5 –∏–≥—Ä–æ–∫–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 7 (5 –∏–≥—Ä–æ–∫–æ–≤)", callback_data="blackjack_room_7_5"),
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 8 (5 –∏–≥—Ä–æ–∫–æ–≤)", callback_data="blackjack_room_8_5")
                ])
                # –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è 6 –∏–≥—Ä–æ–∫–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 9 (6 –∏–≥—Ä–æ–∫–æ–≤)", callback_data="blackjack_room_9_6"),
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 10 (6 –∏–≥—Ä–æ–∫–æ–≤)", callback_data="blackjack_room_10_6")
                ])
                keyboard.append([
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã:",
                    reply_markup=reply_markup
                )
            
            elif query.data.startswith("blackjack_room_"):
                room_id = query.data.split("_")[2]
                max_players = int(query.data.split("_")[3])
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–≥—Ä–µ
                if user_id in active_games:
                    await query.message.reply_text("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
                    return
                
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
                game = None
                for g in active_games.values():
                    if hasattr(g, 'room_id') and g.room_id == f"room_{room_id}_{max_players}":
                        game = g
                        break
                
                # –ï—Å–ª–∏ –∏–≥—Ä—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                if not game:
                    game = BlackjackGame(game_mode="multi", room_id=f"room_{room_id}_{max_players}", chat_id=chat_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
                success, message = game.add_player(user_id, BLACKJACK_MIN_BET, username)
                if not success:
                    await query.message.reply_text(message)
                    return
                
                # –í–ê–ñ–ù–û: –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∏–≥—Ä—É
                for pid in game.players:
                    active_games[pid] = game
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                keyboard = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫–æ–º–Ω–∞—Ç", callback_data="blackjack_multi")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if len(game.players) >= game.min_players:
                    success, message = game.start_game()
                    if success:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
                        game_message = f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ö–æ–º–Ω–∞—Ç–∞ {room_id}\n"
                        game_message += f"–ò–≥—Ä–æ–∫–∏: {', '.join(p.username for p in game.players.values())}\n\n"
                        game_message += "–ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n"
                        for player in game.players.values():
                            game_message += f"{player.username}: {' '.join(str(card) for card in player.hand)} (–°—á–µ—Ç: {player.get_score()})\n"
                        game_message += f"\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {game.dealer.hand[0]} ?\n\n"
                        
                        current_player = game.get_current_player()
                        if current_player:
                            game_message += f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞: {current_player.username}\n\n"
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
                        if current_player and current_player.user_id == user_id:
                            keyboard = [
                                [
                                    InlineKeyboardButton("üé¥ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="blackjack_hit"),
                                    InlineKeyboardButton("‚úã –°—Ç–æ–ø", callback_data="blackjack_stand")
                                ],
                                [
                                    InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="blackjack_double")
                                ]
                            ]
                        keyboard.append([InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="blackjack_exit")])
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await query.message.reply_text(
                            game_message,
                            reply_markup=reply_markup
                        )
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
                    room_info = f"–ö–æ–º–Ω–∞—Ç–∞ {room_id} ({max_players} –∏–≥—Ä–æ–∫–æ–≤)\n"
                    room_info += f"–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤... ({len(game.players)}/{max_players})\n\n"
                    room_info += "–ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ:\n"
                    for player in game.players.values():
                        room_info += f"‚Ä¢ {player.username}\n"
                    
                    await query.message.reply_text(
                        room_info,
                        reply_markup=reply_markup
                    )
            
            elif query.data in ["blackjack_hit", "blackjack_stand", "blackjack_double"]:
                logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ –≤ –∏–≥—Ä–µ: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                game = active_games.get(user_id)
                if not game or user_id not in game.players:
                    await query.message.reply_text("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
                    return
                
                current_player = game.get_current_player()
                if not current_player or current_player.user_id != user_id:
                    await query.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")
                    return
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                if query.data == "blackjack_hit":
                    success, message = game.hit(user_id)
                elif query.data == "blackjack_stand":
                    success, message = game.stand(user_id)
                else:  # blackjack_double
                    success, message = game.double(user_id)
                
                if not success:
                    await query.message.reply_text(message)
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                if game.is_game_over():
                    logger.info("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    results = game.finish_game()
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –∏–≥—Ä–æ–∫–æ–≤
                    for player_id, result in results.items():
                        player = session.query(User).filter(User.user_id == player_id).first()
                        if player:
                            player.balance += result
                            session.add(Transaction(
                                user_id=player_id,
                                amount=result,
                                type=TransactionType.GAME_WIN if result > 0 else TransactionType.GAME_LOSS,
                                game_type="blackjack"
                            ))
                    session.commit()
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
                    for player_id, result in results.items():
                        player = game.players[player_id]
                        personal_result = f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                        personal_result += f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {' '.join(str(card) for card in player.hand)}\n"
                        personal_result += f"–í–∞—à —Å—á–µ—Ç: {player.get_score()}\n"
                        personal_result += f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'+' if result > 0 else ''}{result} –º–æ–Ω–µ—Ç\n\n"
                        personal_result += f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {' '.join(str(card) for card in game.dealer.hand)}\n"
                        personal_result += f"–°—á–µ—Ç –¥–∏–ª–µ—Ä–∞: {game.dealer.get_score()}\n\n"
                        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
                        personal_result += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤:\n"
                        for pid, res in results.items():
                            p = game.players[pid]
                            personal_result += f"{p.username}: {'+' if res > 0 else ''}{res} –º–æ–Ω–µ—Ç\n"
                        keyboard = [[
                            InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                        ]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ: {personal_result}")
                        await query.message.reply_text(
                            personal_result,
                            reply_markup=reply_markup
                        )
                    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    for pid in list(active_games.keys()):
                        if active_games.get(pid) is game:
                            del active_games[pid]
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
                    for player_id, player in game.players.items():
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞
                        player_state = f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {' '.join(str(card) for card in player.hand)}\n"
                        player_state += f"–í–∞—à —Å—á–µ—Ç: {player.get_score()}\n"
                        player_state += f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {player.bet}\n\n"
                        player_state += f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {game.dealer.hand[0]} ?\n\n"
                        
                        current = game.get_current_player()
                        if current:
                            if current.user_id == player_id:
                                player_state += "–°–µ–π—á–∞—Å –≤–∞—à —Ö–æ–¥!"
                            else:
                                player_state += f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞: {current.username}"
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∞–∫—Ç–∏–≤–Ω—É—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞)
                        keyboard = []
                        if current and current.user_id == player_id:
                            keyboard = [
                                [
                                    InlineKeyboardButton("üé¥ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="blackjack_hit"),
                                    InlineKeyboardButton("‚úã –°—Ç–æ–ø", callback_data="blackjack_stand")
                                ],
                                [
                                    InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="blackjack_double")
                                ]
                            ]
                        keyboard.append([InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="blackjack_exit")])
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await query.message.reply_text(
                            player_state,
                            reply_markup=reply_markup
                        )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —á–∞—Ç
                    await query.message.reply_text(
                        f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞: {current_player.username}"
                    )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ: {e}")
        logger.error(traceback.format_exc())
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n\n"
        "üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞:\n"
        "- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 5 –º–æ–Ω–µ—Ç\n"
        "- 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞: x5\n\n"
        "üÉè 21:\n"
        "- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 15 –º–æ–Ω–µ—Ç\n"
        "- –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –¥–∏–ª–µ—Ä–∞\n"
        "- –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä (2-6 –∏–≥—Ä–æ–∫–æ–≤)\n\n"
        "üé≤ –†—É–ª–µ—Ç–∫–∞:\n"
        "- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 –º–æ–Ω–µ—Ç\n"
        "- –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—Ç–∞–≤–æ–∫\n\n"
        "üèÜ /leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "üí∞ /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

async def leaderboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    with get_db() as session:
        top_users = session.query(User).order_by(User.balance.desc()).limit(10).all()
        leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
        for i, user in enumerate(top_users, 1):
            leaderboard_text += f"{i}. {user.username}: {user.balance} –º–æ–Ω–µ—Ç\n"
        await update.message.reply_text(leaderboard_text)

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user or not update.message:
        return
    user_id = update.effective_user.id
    with get_db() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        if user:
            await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç")
        else:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

async def addmoney_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user or not update.message:
        return
    user = update.effective_user
    if user.username != "#–ü–æ–º–µ–Ω—è—Ç—å":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not context.args or len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addmoney <username> <amount>")
        return
    target_username = context.args[0].lstrip('@')
    try:
        amount = int(context.args[1])
    except (ValueError, TypeError):
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    with get_db() as session:
        target_user = session.query(User).filter(User.username == target_username).first()
        if not target_user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        target_user.balance += amount
        session.commit()
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {target_user.balance}")

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user or not update.message:
        return
    user = update.effective_user
    if user.username != "#–ü–æ–º–µ–Ω—è—Ç—å":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not context.args or len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <username>")
        return
    target_username = context.args[0].lstrip('@')
    with get_db() as session:
        target_user = session.query(User).filter(User.username == target_username).first()
        if not target_user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        target_user.is_banned = 1
        session.commit()
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –∑–∞–±–∞–Ω–µ–Ω.")

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user or not update.message:
        return
    user = update.effective_user
    if user.username != "#–ü–æ–º–µ–Ω—è—Ç—å":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not context.args or len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <username>")
        return
    target_username = context.args[0].lstrip('@')
    with get_db() as session:
        target_user = session.query(User).filter(User.username == target_username).first()
        if not target_user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        target_user.is_banned = 0
        session.commit()
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        print("[DEBUG] main() started")
        logger.info("main() started")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        print("[DEBUG] DB initialized")
        logger.info("DB initialized")
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(BOT_TOKEN).build()
        print("[DEBUG] Application built")
        logger.info("Application built")
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(blackjack_handler, pattern="^blackjack_"))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("leaderboard", leaderboard_command))
        application.add_handler(CommandHandler("balance", balance_command))
        application.add_handler(CommandHandler("addmoney", addmoney_command, filters.ALL))
        application.add_handler(CommandHandler("ban", ban_command, filters.ALL))
        application.add_handler(CommandHandler("unban", unban_command, filters.ALL))
        print("[DEBUG] Handlers added")
        logger.info("Handlers added")
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("[DEBUG] About to run_polling")
        logger.info("About to run_polling")
        await application.run_polling()
        print("[DEBUG] run_polling finished")
        logger.info("run_polling finished")
    except Exception as e:
        print(f"[EXCEPTION] {e}")
        print(traceback.format_exc())
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    if sys.platform.startswith('win') and sys.version_info >= (3, 8):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main()) 