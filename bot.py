import logging
import traceback
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN, INITIAL_BALANCE, BLACKJACK_MIN_BET
from models import User, Transaction, GameSession, TransactionType
from database import init_db, get_db
from datetime import datetime
from games.blackjack import BlackjackGame

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    logger.error(traceback.format_exc())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username})")
    
    try:
        with get_db() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = session.query(User).filter(User.user_id == user.id).first()
            logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_user is not None}")
            
            if not db_user:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                db_user = User(
                    user_id=user.id,
                    username=user.username,
                    balance=INITIAL_BALANCE
                )
                session.add(db_user)
                session.commit()
                logger.info("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                
                welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Spin Garden, {user.first_name}! üé∞\n\n" \
                              f"–í–∞—à –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {INITIAL_BALANCE} –º–æ–Ω–µ—Ç"
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –±–∞–ª–∞–Ω—Å: {db_user.balance}")
                welcome_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üé∞\n\n" \
                              f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {db_user.balance} –º–æ–Ω–µ—Ç"

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–≥—Ä–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞", callback_data="game_slots"),
                    InlineKeyboardButton("üÉè 21", callback_data="game_blackjack")
                ],
                [
                    InlineKeyboardButton("üé≤ –†—É–ª–µ—Ç–∫–∞", callback_data="game_roulette"),
                    InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
                ],
                [
                    InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard"),
                    InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        logger.error(traceback.format_exc())
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")

    try:
        with get_db() as session:
            if query.data == "balance":
                user = session.query(User).filter(User.user_id == query.from_user.id).first()
                if user:
                    await query.message.reply_text(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç")
                    logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {user.balance}")
                else:
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    await query.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            elif query.data == "leaderboard":
                top_users = session.query(User).order_by(User.balance.desc()).limit(10).all()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(top_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")
                
                leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
                for i, user in enumerate(top_users, 1):
                    leaderboard_text += f"{i}. {user.username}: {user.balance} –º–æ–Ω–µ—Ç\n"
                
                await query.message.reply_text(leaderboard_text)
                logger.info("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            elif query.data == "help":
                help_text = (
                    "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n\n"
                    "üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞:\n"
                    "- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 5 –º–æ–Ω–µ—Ç\n"
                    "- 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞: x5\n\n"
                    "üÉè 21:\n"
                    "- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 15 –º–æ–Ω–µ—Ç\n"
                    "- –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –¥–∏–ª–µ—Ä–∞\n"
                    "- –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä (2-6 –∏–≥—Ä–æ–∫–æ–≤)\n\n"
                    "üé≤ –†—É–ª–µ—Ç–∫–∞:\n"
                    "- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 –º–æ–Ω–µ—Ç\n"
                    "- –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—Ç–∞–≤–æ–∫\n\n"
                    "üí∞ –ö–æ–º–∞–Ω–¥—ã:\n"
                    "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                    "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                    "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
                await query.message.reply_text(help_text)
                logger.info("–°–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            elif query.data == "game_blackjack":
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫")
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
                keyboard = [
                    [
                        InlineKeyboardButton("üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞", callback_data="blackjack_single"),
                        InlineKeyboardButton("üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä", callback_data="blackjack_multi")
                    ],
                    [
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã –≤ 21:\n\n"
                    "üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞ - –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –¥–∏–ª–µ—Ä–∞\n"
                    "üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä - –∏–≥—Ä–∞ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ (2-6 —á–µ–ª–æ–≤–µ–∫)",
                    reply_markup=reply_markup
                )
            
            elif query.data == "back_to_menu":
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–∞–º–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞", callback_data="game_slots"),
                        InlineKeyboardButton("üÉè 21", callback_data="game_blackjack")
                    ],
                    [
                        InlineKeyboardButton("üé≤ –†—É–ª–µ—Ç–∫–∞", callback_data="game_roulette"),
                        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
                    ],
                    [
                        InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard"),
                        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=reply_markup)
            
            elif query.data.startswith("game_"):
                game_type = query.data.split("_")[1]
                if game_type != "blackjack":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä
                    await query.message.reply_text(f"üéÆ –ò–≥—Ä–∞ {game_type} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É {game_type}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
        logger.error(traceback.format_exc())
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def blackjack_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –≤ –±–ª—ç–∫–¥–∂–µ–∫"""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {query.data}")
    
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.first_name
    chat_id = query.message.chat_id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    
    try:
        with get_db() as session:
            user = session.query(User).filter(User.user_id == user_id).first()
            if not user:
                await query.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if query.data == "blackjack_single":
                logger.info(f"–ù–∞—á–∞–ª–æ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–¥–∏–Ω–æ—á–Ω—É—é –∏–≥—Ä—É
                game = BlackjackGame(game_mode="single", chat_id=chat_id)
                success, message = game.add_player(user_id, BLACKJACK_MIN_BET, username)
                if not success:
                    await query.message.reply_text(message)
                    return
                
                success, message = game.start_game()
                if not success:
                    await query.message.reply_text(message)
                    return
                
                active_games[user_id] = game
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã
                keyboard = [
                    [
                        InlineKeyboardButton("üé¥ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="blackjack_hit"),
                        InlineKeyboardButton("‚úã –°—Ç–æ–ø", callback_data="blackjack_stand")
                    ],
                    [
                        InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="blackjack_double")
                    ],
                    [
                        InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="blackjack_exit")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.message.edit_text(
                    f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n{game.get_game_state()}",
                    reply_markup=reply_markup
                )
            
            elif query.data == "blackjack_multi":
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä")
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
                keyboard = []
                # –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è 2 –∏–≥—Ä–æ–∫–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 1 (2 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_1_2"),
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 2 (2 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_2_2")
                ])
                # –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è 3 –∏–≥—Ä–æ–∫–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 3 (3 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_3_3"),
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 4 (3 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_4_3")
                ])
                # –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è 4 –∏–≥—Ä–æ–∫–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 5 (4 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_5_4"),
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 6 (4 –∏–≥—Ä–æ–∫–∞)", callback_data="blackjack_room_6_4")
                ])
                # –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è 5 –∏–≥—Ä–æ–∫–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 7 (5 –∏–≥—Ä–æ–∫–æ–≤)", callback_data="blackjack_room_7_5"),
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 8 (5 –∏–≥—Ä–æ–∫–æ–≤)", callback_data="blackjack_room_8_5")
                ])
                # –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è 6 –∏–≥—Ä–æ–∫–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 9 (6 –∏–≥—Ä–æ–∫–æ–≤)", callback_data="blackjack_room_9_6"),
                    InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞ 10 (6 –∏–≥—Ä–æ–∫–æ–≤)", callback_data="blackjack_room_10_6")
                ])
                keyboard.append([
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã:",
                    reply_markup=reply_markup
                )
            
            elif query.data.startswith("blackjack_room_"):
                room_id = query.data.split("_")[2]
                max_players = int(query.data.split("_")[3])
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–≥—Ä–µ
                if user_id in active_games:
                    await query.message.reply_text("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
                    return
                
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
                game = None
                for g in active_games.values():
                    if g.room_id == f"room_{room_id}_{max_players}":
                        game = g
                        break
                
                # –ï—Å–ª–∏ –∏–≥—Ä—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                if not game:
                    game = BlackjackGame(game_mode="multi", room_id=f"room_{room_id}_{max_players}", chat_id=chat_id)
                    active_games[user_id] = game
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
                success, message = game.add_player(user_id, BLACKJACK_MIN_BET, username)
                if not success:
                    await query.message.reply_text(message)
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                keyboard = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫–æ–º–Ω–∞—Ç", callback_data="blackjack_multi")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if len(game.players) >= game.min_players:
                    success, message = game.start_game()
                    if success:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
                        for player_id in game.players:
                            game_keyboard = [
                                [
                                    InlineKeyboardButton("üé¥ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="blackjack_hit"),
                                    InlineKeyboardButton("‚úã –°—Ç–æ–ø", callback_data="blackjack_stand")
                                ],
                                [
                                    InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="blackjack_double")
                                ],
                                [
                                    InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="blackjack_exit")
                                ]
                            ]
                            game_reply_markup = InlineKeyboardMarkup(game_keyboard)
                            await context.bot.send_message(
                                chat_id=game.chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–≥—Ä—ã
                                text=f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n{game.get_game_state()}",
                                reply_markup=game_reply_markup
                            )
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
                    room_info = f"–ö–æ–º–Ω–∞—Ç–∞ {room_id} ({max_players} –∏–≥—Ä–æ–∫–æ–≤)\n"
                    room_info += f"–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤... ({len(game.players)}/{max_players})\n\n"
                    room_info += "–ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ:\n"
                    for player in game.players.values():
                        room_info += f"‚Ä¢ {player.username}\n"
                    
                    await context.bot.send_message(
                        chat_id=game.chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–≥—Ä—ã
                        text=room_info,
                        reply_markup=reply_markup
                    )
            
            elif query.data == "blackjack_exit":
                # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                game = None
                for g in active_games.values():
                    if user_id in g.players:
                        game = g
                        break
                
                if not game:
                    await query.message.reply_text("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
                    return
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–≥—Ä–æ–∫—É
                player = game.players[user_id]
                user.balance += player.bet
                session.add(Transaction(
                    user_id=user_id,
                    amount=player.bet,
                    type=TransactionType.REFUND,
                    game_type="blackjack_exit"
                ))
                session.commit()
                
                # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã
                del game.players[user_id]
                
                if not game.players:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
                    for player_id in list(active_games.keys()):
                        if player_id in active_games:
                            del active_games[player_id]
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
                    await context.bot.send_message(
                        chat_id=game.chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–≥—Ä—ã
                        text=f"–ò–≥—Ä–æ–∫ {username} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã.\n\n{game.get_game_state()}"
                    )
                
                await query.message.edit_text(
                    "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                    ]])
                )
            
            elif query.data in ["blackjack_hit", "blackjack_stand", "blackjack_double"]:
                logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ –≤ –∏–≥—Ä–µ: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                game = None
                for g in active_games.values():
                    if user_id in g.players:
                        game = g
                        break
                
                if not game:
                    await query.message.reply_text("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
                    return
                
                current_player = game.get_current_player()
                if not current_player or current_player.user_id != user_id:
                    await query.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")
                    return
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                if query.data == "blackjack_hit":
                    success, message = game.hit(user_id)
                elif query.data == "blackjack_stand":
                    success, message = game.stand(user_id)
                else:  # blackjack_double
                    success, message = game.double(user_id)
                
                if not success:
                    await query.message.reply_text(message)
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                if game.is_game_over():
                    logger.info("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    results = game.finish_game()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –∏–≥—Ä–æ–∫–æ–≤
                    for player_id, result in results.items():
                        player = session.query(User).filter(User.user_id == player_id).first()
                        if player:
                            player.balance += result
                            session.add(Transaction(
                                user_id=player_id,
                                amount=result,
                                type=TransactionType.GAME,
                                game_type="blackjack"
                            ))
                    session.commit()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
                    result_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:\n\n"
                    for player_id, result in results.items():
                        player = game.players[player_id]
                        result_text += f"{player.username}:\n"
                        result_text += f"–ö–∞—Ä—Ç—ã: {' '.join(str(card) for card in player.hand)}\n"
                        result_text += f"–°—á–µ—Ç: {player.get_score()}\n"
                        result_text += f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'+' if result > 0 else ''}{result} –º–æ–Ω–µ—Ç\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    dealer_cards = " ".join(str(card) for card in game.dealer.hand)
                    result_text += f"–î–∏–ª–µ—Ä:\n–ö–∞—Ä—Ç—ã: {dealer_cards}\n–°—á–µ—Ç: {game.dealer.get_score()}"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
                    if game.game_mode == "single":
                        keyboard = [
                            [
                                InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="blackjack_single"),
                                InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                            ]
                        ]
                    else:
                        keyboard = [[
                            InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                        ]]
                    
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await context.bot.send_message(
                        chat_id=game.chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–≥—Ä—ã
                        text=result_text,
                        reply_markup=reply_markup
                    )
                    
                    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
                    for player_id in game.players:
                        if player_id in active_games:
                            del active_games[player_id]
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
                    keyboard = [
                        [
                            InlineKeyboardButton("üé¥ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="blackjack_hit"),
                            InlineKeyboardButton("‚úã –°—Ç–æ–ø", callback_data="blackjack_stand")
                        ],
                        [
                            InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="blackjack_double")
                        ],
                        [
                            InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="blackjack_exit")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    current_player = game.get_current_player()
                    if current_player:
                        await context.bot.send_message(
                            chat_id=game.chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–≥—Ä—ã
                            text=f"{game.get_game_state()}",
                            reply_markup=reply_markup
                        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ: {e}")
        logger.error(traceback.format_exc())
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(blackjack_handler, pattern="^blackjack_"))
        application.add_handler(CallbackQueryHandler(button_handler))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error(traceback.format_exc())

if __name__ == '__main__':
    main() 